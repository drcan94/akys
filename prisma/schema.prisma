generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  LECTURER
  RESIDENT
  TECHNICIAN
  NURSE
  STAFF
  PENDING
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum AsaScore {
  ASA_1
  ASA_2
  ASA_3
  ASA_4
  ASA_5
  ASA_6
  ASA_1E
  ASA_2E
  ASA_3E
  ASA_4E
  ASA_5E
}

enum AnesthesiaMethod {
  GENERAL
  REGIONAL
  LOCAL
  SEDATION
  COMBINED
}

enum NotificationType {
  OPERATION_NOTE_CREATED
  OPERATION_NOTE_UPDATED
  PREOPERATIVE_EVALUATION_CREATED
  PREOPERATIVE_EVALUATION_UPDATED
  NEW_MESSAGE
  MENTION
  PATIENT_UPDATE
  SYSTEM
  REACTION
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  password            String
  role                UserRole  @default(PENDING)
  image               String?
  deviceTokens        String[]  @default([])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastLoginAt         DateTime?
  lastLoginIp         String?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?

  // Relation to OperationNotes where the user has locked the note
  lockedNotes OperationNote? @relation("UserLockedNotes")

  // Relation to PreoperativeEvaluation where the user has modified
  modifiedPreoperativeEvaluation PreoperativeEvaluation? @relation("UserModifiedPreoperativeEvaluation")

  // Two-Factor Authentication
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String? // Encrypted TOTP secret
  backupCodes       String[] // Encrypted backup codes
  tempSecretKey     String? // Temporary secret during 2FA setup
  tempSecretExpires DateTime? // Expiration time for temporary secret

  // Security and Session Management
  activeSessions  Session[]
  securityLogs    SecurityLog[]
  passwordHistory PasswordHistory[]

  // Notifications and Messages
  notifications        Notification[]
  notificationSettings NotificationSettings?
  notificationLogs     NotificationLog[]
  messages             Message[]
  messageReactions     MessageReaction[]
  channelMemberships   ChannelMembership[]

  // Clinical Records
  operationNotes          OperationNote[]
  preoperativeEvaluations PreoperativeEvaluation[]
  fileAttachments         FileAttachment[]
  auditLogs               AuditLog[]

  @@index([email])
  @@index([role])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@index([updatedAt])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  deviceInfo   Json? // Store device and browser information
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  isRevoked    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([lastActivity])
  @@index([expiresAt])
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String
  event     String // Login, Logout, 2FA Enable, Password Change, etc.
  status    String // Success, Failure
  ipAddress String?
  userAgent String?
  details   Json?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([event])
  @@index([timestamp])
  @@index([status])
}

model PasswordHistory {
  id        String   @id @default(cuid())
  userId    String
  password  String // Hashed password
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  operationNotes     Boolean  @default(true)
  messages           Boolean  @default(true)
  patientUpdates     Boolean  @default(true)
  mentions           Boolean  @default(true)
  reactions          Boolean  @default(true)
  emailNotifications Boolean  @default(false)
  pushNotifications  Boolean  @default(false)
  dailyDigest        Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([updatedAt])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json             @default("{}")
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([isRead])
}

model NotificationLog {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  body        String
  message     String
  deviceToken String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   Json
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model Patient {
  id                  String     @id @default(cuid())
  medicalRecordNumber String     @unique
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  gender              Gender
  phoneNumber         String?
  email               String?
  bloodType           BloodType?
  allergies           String?
  comorbidities       String[]   @default([])
  medications         Json       @default("[]")
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  lastVisit           DateTime?
  emergencyContact    Json?      @default("{}")

  preoperativeEvaluations PreoperativeEvaluation[]
  operationNotes          OperationNote[]
  vitalSigns              VitalSigns[]
  appointments            Appointment[]

  @@index([medicalRecordNumber])
  @@index([firstName, lastName])
  @@index([dateOfBirth])
  @@index([lastVisit])
  @@index([createdAt])
}

model VitalSigns {
  id               String   @id @default(cuid())
  patientId        String
  recordedAt       DateTime @default(now())
  bloodPressure    String
  heartRate        Int
  temperature      Float
  respiratoryRate  Int
  oxygenSaturation Int
  pain             Int?
  notes            String?

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([recordedAt])
}

model Appointment {
  id              String   @id @default(cuid())
  patientId       String
  scheduledFor    DateTime
  appointmentType String
  status          String   @default("SCHEDULED")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([scheduledFor])
  @@index([status])
}

model PreoperativeEvaluation {
  id               String    @id @default(cuid())
  patientId        String
  evaluationDate   DateTime
  asaScore         AsaScore
  comorbidities    String[]
  requiredTests    Json      @default("[]")
  consentObtained  Boolean   @default(false)
  allergies        String?
  medications      Json      @default("[]")
  notes            String?
  createdById      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastModifiedById String?   @unique
  lastModifiedAt   DateTime?

  patient        Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdBy      User    @relation(fields: [createdById], references: [id])
  lastModifiedBy User?   @relation("UserModifiedPreoperativeEvaluation", fields: [lastModifiedById], references: [id])

  @@index([patientId])
  @@index([createdById])
  @@index([evaluationDate])
  @@index([asaScore])
}

model OperationNote {
  id                        String           @id @default(cuid())
  patientId                 String
  procedureDate             DateTime
  procedureStartTime        String
  procedureEndTime          String
  anesthesiaMethod          AnesthesiaMethod
  medicationsAdministered   Json             @default("[]")
  monitoringDetails         String
  vitalSigns                Json             @default("{}")
  intraoperativeEvents      String
  complications             String[]         @default([])
  postoperativeInstructions String
  isLocked                  Boolean          @default(false)
  lockedById                String?          @unique
  lockedAt                  DateTime?
  createdById               String
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  lastModifiedById          String?
  lastModifiedAt            DateTime?

  patient         Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdBy       User             @relation(fields: [createdById], references: [id])
  lockedBy        User?            @relation("UserLockedNotes", fields: [lockedById], references: [id]) // Define relation for lockedById
  fileAttachments FileAttachment[]

  @@index([patientId])
  @@index([createdById])
  @@index([procedureDate])
  @@index([anesthesiaMethod])
  @@index([isLocked])
}

model FileAttachment {
  id              String   @id @default(cuid())
  fileName        String
  fileType        String
  fileSize        Int
  fileUrl         String
  operationNoteId String
  uploadedById    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  checksum        String? // For file integrity verification
  isEncrypted     Boolean  @default(false)

  operationNote OperationNote @relation(fields: [operationNoteId], references: [id], onDelete: Cascade)
  uploadedBy    User          @relation(fields: [uploadedById], references: [id])

  @@index([operationNoteId])
  @@index([uploadedById])
  @@index([fileType])
  @@index([createdAt])
}

model Channel {
  id          String     @id @default(cuid())
  name        String
  description String?
  roleAccess  UserRole[]
  isArchived  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  messages Message[]
  members  ChannelMembership[]

  @@index([name])
  @@index([isArchived])
  @@index([createdAt])
}

model ChannelMembership {
  id        String   @id @default(cuid())
  channelId String
  userId    String
  isAdmin   Boolean  @default(false)
  lastRead  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@index([channelId])
  @@index([userId])
  @@index([lastRead])
}

model Message {
  id        String    @id @default(cuid())
  channelId String
  userId    String
  content   String
  mentions  String[]  @default([])
  isEdited  Boolean   @default(false)
  editedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  channel   Channel           @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id])
  reactions MessageReaction[]

  @@index([channelId])
  @@index([userId])
  @@index([createdAt])
  @@index([mentions])
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
  @@index([createdAt])
}
